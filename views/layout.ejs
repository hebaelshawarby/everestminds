<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? sails.config.appName : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--
        SEO
        ===
    -->

    <meta name="description" content="<%= typeof meta_desc !== 'undefined'? meta_desc: sails.config.logoUrl %>">

    <!-- Facebook Meta Tags-->
    <meta property="og:title" content="<%=sails.config.appName%>" />
    <meta property="og:site_name" content="<%=sails.config.appName%>"/>
    <meta property="og:description" content="Moneyfellows gives access to interest free credit and better saving achievements fully powered by your social network." />
    <meta property="fb:app_id" content="<%=sails.config.facebookAuth.clientID%>" />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content="en_US" />
    <meta property="og:image" content="<%=sails.config.logoUrl%>" />

    <!-- TODO: Google Strucured Data -->
    <!-- TODO: Facebook Pixel Code -->

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/dependencies/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/dependencies/style.css">
    <link rel="stylesheet" href="/styles/custom.css">
    <link rel="stylesheet" href="/styles/font-awesome.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/intlTelInput.css">
    <link rel="stylesheet" href="/styles/ng-notify.css">
    <!--STYLES END-->

  </head>

  <body ng-app="everestminds">
  <%
  var user = UserService.getCurrUserCookie(req)
  %>
  <div class="" ng-controller="MainController" ng-init="user= <%= JSON.stringify(UserService.getCurrUserCookie(req)) %>;">
    <div class="main-wrapper">
      <%- body %>
    </div>
  </div>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.js"></script>
    <script src="/js/dependencies/jquery/jquery.js"></script>
    <script src="/js/dependencies/moment.min.js"></script>
    <script src="/js/angular/controllers/AccountController.js"></script>
    <script src="/js/angular/controllers/MainController.js"></script>
    <script src="/js/angular/controllers/PasswordController.js"></script>
    <script src="/js/angular/controllers/SignupController.js"></script>
    <script src="/js/angular/controllers/VerifyMobileController.js"></script>
    <script src="/js/angular/angular-moment.min.js"></script>
    <script src="/js/angular/angular-promise-buttons.js"></script>
    <script src="/js/angular/angular-recaptcha.js"></script>
    <script src="/js/angular/app.js"></script>
    <script src="/js/angular/ng-intl-tel-input.js"></script>
    <script src="/js/angular/ng-notify.js"></script>
    <script src="/js/angular/ui-bootstrap-tpls-1.3.2.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
